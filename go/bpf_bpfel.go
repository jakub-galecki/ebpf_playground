// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfCommand struct {
	Len     int32
	Buf     [256]int8
	_       [4]byte
	Ts      uint64
	Latency uint64
}

type bpfOutputEvent struct {
	Buf     [256]int8
	Status  [64]int8
	Len     int32
	_       [4]byte
	Latency uint64
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
	bpfVariableSpecs
}

// bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	EnterRead  *ebpf.ProgramSpec `ebpf:"enter_read"`
	EnterWrite *ebpf.ProgramSpec `ebpf:"enter_write"`
	ExitRead   *ebpf.ProgramSpec `ebpf:"exit_read"`
	ExitWrite  *ebpf.ProgramSpec `ebpf:"exit_write"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	Commands    *ebpf.MapSpec `ebpf:"commands"`
	Output      *ebpf.MapSpec `ebpf:"output"`
	ReadBuffer  *ebpf.MapSpec `ebpf:"read_buffer"`
	TargetPids  *ebpf.MapSpec `ebpf:"target_pids"`
	WriteBuffer *ebpf.MapSpec `ebpf:"write_buffer"`
}

// bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfVariableSpecs struct {
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
	bpfVariables
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	Commands    *ebpf.Map `ebpf:"commands"`
	Output      *ebpf.Map `ebpf:"output"`
	ReadBuffer  *ebpf.Map `ebpf:"read_buffer"`
	TargetPids  *ebpf.Map `ebpf:"target_pids"`
	WriteBuffer *ebpf.Map `ebpf:"write_buffer"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.Commands,
		m.Output,
		m.ReadBuffer,
		m.TargetPids,
		m.WriteBuffer,
	)
}

// bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfVariables struct {
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	EnterRead  *ebpf.Program `ebpf:"enter_read"`
	EnterWrite *ebpf.Program `ebpf:"enter_write"`
	ExitRead   *ebpf.Program `ebpf:"exit_read"`
	ExitWrite  *ebpf.Program `ebpf:"exit_write"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.EnterRead,
		p.EnterWrite,
		p.ExitRead,
		p.ExitWrite,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel.o
var _BpfBytes []byte
